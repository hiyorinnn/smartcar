## Add your respective docker files names here
volumes:
  pgdata:
  rabbitmq_data:
    name: esd_rabbitmq_data

networks:
  smartcar-net:
    driver: bridge
    name: smartcar-net

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:17.4
    restart: always
    networks:
      - smartcar-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.9
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - smartcar-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.9
    restart: always
    networks:
      - smartcar-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.

  ###################################
  # Car Available microservice
  ###################################
  car_available:
    build:
      context: ./ 
      dockerfile: car_available.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/car_service
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net

  ###################################
  # Location microservice
  ###################################
  location:
    build:
      context: ./ 
      dockerfile: location.Dockerfile
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    networks:
      - smartcar-net

  ###################################
  # GPS microservice
  ###################################
  gps:
    build:
      context: ./ 
      dockerfile: gps.Dockerfile
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net

  ###################################
  # User microservice
  ###################################
  user:
    build:
      context: ./ 
      dockerfile: user.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/car_service
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net

  ###################################
  # Geofence microservice
  ###################################
  geofence:
    build:
      context: ./geofence
      dockerfile: Dockerfile
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net
    depends_on:
      - car_available

  ###################################
  # Error Handler microservice
  ###################################
  error_handler:
    build:
      context: ./error-handling-service/
      dockerfile: error_handler.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/smartcar_logs
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net

  ###################################
  # Booking Log microservice
  ###################################
  booking_log:
    build:
      context: ./booking-log-service
      dockerfile: booking_log.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/car_service
      PYTHONUNBUFFERED: 1
    networks:
      - smartcar-net

  ###################################
  # Rental Composite microservice
  ###################################
  rental-composite:
    build:
      context: ./ 
      dockerfile: rental-composite.Dockerfile
    container_name: rental-composite
    restart: always
    environment:
      - CAR_AVAILABILITY_SERVICE_URL=http://car_available:5000
      - BOOKING_LOG_SERVICE_URL=http://booking_log:5006/api
    ports:
      - "5007:5007"
    networks:
      - smartcar-net
    depends_on:
      - car_available
      - booking_log

  ###################################
  # Payment microservice
  ###################################
  payment_service:
    build:
      context: ./ 
      dockerfile: payment.Dockerfile
    container_name: payment_service
    restart: always
    environment:
      - STRIPE_API_KEY=sk_test_51R7XLM4Jm41usPZBwNr5slG3GHhThtJ4LLHe9MpwsXxnzIT2c11AKYoHGLvO0KwxCEGztfwuI3ozrQ0mAiqJMcM400uwoLUqju
      - STRIPE_WEBHOOK_SECRET=whsec_2dWJNk3ZJZ7xtTzl0qpVZAShENq4OJws
      - rental_composite_URL=http://rental-composite:5007/api/v1
      - booking_log_URL=http://booking_log:5006/api
    networks:
      - smartcar-net
    depends_on:
      - booking_log
      - rental-composite

  ###################################
  # Notification microservice
  ###################################
  notification:
    build:
      context: ./
      dockerfile: notification.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/car_service
      PYTHONUNBUFFERED: 1
    ports:
      - "5009:5009" 
    networks:
      - smartcar-net
    depends_on:
      - rabbitmq
      - amqp_setup # remove if we manually activate amqp_setup instead, since amqp_setup is not a microservice

  ###################################
  # Aiprocessing microservice
  ###################################
  aiprocessing:
    build:
      context: ./aiprocessing-service
      dockerfile: aiprocessing.Dockerfile
    restart: always
    environment:
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
    env_file:
      - .env
    networks:
      - smartcar-net

  ###################################
  # Return microservice
  ###################################
  return:
    build:
      context: ./return-service
      dockerfile: return.Dockerfile
    restart: always
    ports:
      - "5011:5011"
    networks:
      - smartcar-net
    depends_on:
      - error_handler
      - booking_log
      - payment_service
      - aiprocessing
      - notification
      - rabbitmq
      - amqp_setup 

  ###################################
  # RabbitMQ: The messaging broker   
  ###################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - smartcar-net

  ####################################
  # AMQP_Setup Microservice 
  ####################################
  amqp_setup:
    build:
      context: ../rabbitmq
      dockerfile: amqp_setup.Dockerfile
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5010:5010"
    networks:
      - smartcar-net
    depends_on:
      - rabbitmq
